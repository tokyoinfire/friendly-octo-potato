/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoCallService } from "../videoCall.service";
import { VideoCallCreateInput } from "./VideoCallCreateInput";
import { VideoCall } from "./VideoCall";
import { VideoCallFindManyArgs } from "./VideoCallFindManyArgs";
import { VideoCallWhereUniqueInput } from "./VideoCallWhereUniqueInput";
import { VideoCallUpdateInput } from "./VideoCallUpdateInput";
import { VideoCallParticipantFindManyArgs } from "../../videoCallParticipant/base/VideoCallParticipantFindManyArgs";
import { VideoCallParticipant } from "../../videoCallParticipant/base/VideoCallParticipant";
import { VideoCallParticipantWhereUniqueInput } from "../../videoCallParticipant/base/VideoCallParticipantWhereUniqueInput";

export class VideoCallControllerBase {
  constructor(protected readonly service: VideoCallService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoCall })
  async createVideoCall(
    @common.Body() data: VideoCallCreateInput
  ): Promise<VideoCall> {
    return await this.service.createVideoCall({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        endTime: true,
        title: true,
        startTime: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoCall] })
  @ApiNestedQuery(VideoCallFindManyArgs)
  async videoCalls(@common.Req() request: Request): Promise<VideoCall[]> {
    const args = plainToClass(VideoCallFindManyArgs, request.query);
    return this.service.videoCalls({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        endTime: true,
        title: true,
        startTime: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoCall(
    @common.Param() params: VideoCallWhereUniqueInput
  ): Promise<VideoCall | null> {
    const result = await this.service.videoCall({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        endTime: true,
        title: true,
        startTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoCall(
    @common.Param() params: VideoCallWhereUniqueInput,
    @common.Body() data: VideoCallUpdateInput
  ): Promise<VideoCall | null> {
    try {
      return await this.service.updateVideoCall({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          endTime: true,
          title: true,
          startTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoCall(
    @common.Param() params: VideoCallWhereUniqueInput
  ): Promise<VideoCall | null> {
    try {
      return await this.service.deleteVideoCall({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          endTime: true,
          title: true,
          startTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/videoCallParticipants")
  @ApiNestedQuery(VideoCallParticipantFindManyArgs)
  async findVideoCallParticipants(
    @common.Req() request: Request,
    @common.Param() params: VideoCallWhereUniqueInput
  ): Promise<VideoCallParticipant[]> {
    const query = plainToClass(VideoCallParticipantFindManyArgs, request.query);
    const results = await this.service.findVideoCallParticipants(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        videoCall: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videoCallParticipants")
  async connectVideoCallParticipants(
    @common.Param() params: VideoCallWhereUniqueInput,
    @common.Body() body: VideoCallParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoCallParticipants: {
        connect: body,
      },
    };
    await this.service.updateVideoCall({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videoCallParticipants")
  async updateVideoCallParticipants(
    @common.Param() params: VideoCallWhereUniqueInput,
    @common.Body() body: VideoCallParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoCallParticipants: {
        set: body,
      },
    };
    await this.service.updateVideoCall({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videoCallParticipants")
  async disconnectVideoCallParticipants(
    @common.Param() params: VideoCallWhereUniqueInput,
    @common.Body() body: VideoCallParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoCallParticipants: {
        disconnect: body,
      },
    };
    await this.service.updateVideoCall({
      where: params,
      data,
      select: { id: true },
    });
  }
}
