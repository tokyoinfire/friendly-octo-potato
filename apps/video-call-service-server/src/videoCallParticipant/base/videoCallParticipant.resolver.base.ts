/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VideoCallParticipant } from "./VideoCallParticipant";
import { VideoCallParticipantCountArgs } from "./VideoCallParticipantCountArgs";
import { VideoCallParticipantFindManyArgs } from "./VideoCallParticipantFindManyArgs";
import { VideoCallParticipantFindUniqueArgs } from "./VideoCallParticipantFindUniqueArgs";
import { CreateVideoCallParticipantArgs } from "./CreateVideoCallParticipantArgs";
import { UpdateVideoCallParticipantArgs } from "./UpdateVideoCallParticipantArgs";
import { DeleteVideoCallParticipantArgs } from "./DeleteVideoCallParticipantArgs";
import { VideoCall } from "../../videoCall/base/VideoCall";
import { User } from "../../user/base/User";
import { VideoCallParticipantService } from "../videoCallParticipant.service";
@graphql.Resolver(() => VideoCallParticipant)
export class VideoCallParticipantResolverBase {
  constructor(protected readonly service: VideoCallParticipantService) {}

  async _videoCallParticipantsMeta(
    @graphql.Args() args: VideoCallParticipantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VideoCallParticipant])
  async videoCallParticipants(
    @graphql.Args() args: VideoCallParticipantFindManyArgs
  ): Promise<VideoCallParticipant[]> {
    return this.service.videoCallParticipants(args);
  }

  @graphql.Query(() => VideoCallParticipant, { nullable: true })
  async videoCallParticipant(
    @graphql.Args() args: VideoCallParticipantFindUniqueArgs
  ): Promise<VideoCallParticipant | null> {
    const result = await this.service.videoCallParticipant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VideoCallParticipant)
  async createVideoCallParticipant(
    @graphql.Args() args: CreateVideoCallParticipantArgs
  ): Promise<VideoCallParticipant> {
    return await this.service.createVideoCallParticipant({
      ...args,
      data: {
        ...args.data,

        videoCall: args.data.videoCall
          ? {
              connect: args.data.videoCall,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VideoCallParticipant)
  async updateVideoCallParticipant(
    @graphql.Args() args: UpdateVideoCallParticipantArgs
  ): Promise<VideoCallParticipant | null> {
    try {
      return await this.service.updateVideoCallParticipant({
        ...args,
        data: {
          ...args.data,

          videoCall: args.data.videoCall
            ? {
                connect: args.data.videoCall,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoCallParticipant)
  async deleteVideoCallParticipant(
    @graphql.Args() args: DeleteVideoCallParticipantArgs
  ): Promise<VideoCallParticipant | null> {
    try {
      return await this.service.deleteVideoCallParticipant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => VideoCall, {
    nullable: true,
    name: "videoCall",
  })
  async getVideoCall(
    @graphql.Parent() parent: VideoCallParticipant
  ): Promise<VideoCall | null> {
    const result = await this.service.getVideoCall(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: VideoCallParticipant
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
