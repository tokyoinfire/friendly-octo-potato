/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoCallParticipantService } from "../videoCallParticipant.service";
import { VideoCallParticipantCreateInput } from "./VideoCallParticipantCreateInput";
import { VideoCallParticipant } from "./VideoCallParticipant";
import { VideoCallParticipantFindManyArgs } from "./VideoCallParticipantFindManyArgs";
import { VideoCallParticipantWhereUniqueInput } from "./VideoCallParticipantWhereUniqueInput";
import { VideoCallParticipantUpdateInput } from "./VideoCallParticipantUpdateInput";

export class VideoCallParticipantControllerBase {
  constructor(protected readonly service: VideoCallParticipantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoCallParticipant })
  async createVideoCallParticipant(
    @common.Body() data: VideoCallParticipantCreateInput
  ): Promise<VideoCallParticipant> {
    return await this.service.createVideoCallParticipant({
      data: {
        ...data,

        videoCall: data.videoCall
          ? {
              connect: data.videoCall,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        videoCall: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoCallParticipant] })
  @ApiNestedQuery(VideoCallParticipantFindManyArgs)
  async videoCallParticipants(
    @common.Req() request: Request
  ): Promise<VideoCallParticipant[]> {
    const args = plainToClass(VideoCallParticipantFindManyArgs, request.query);
    return this.service.videoCallParticipants({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        videoCall: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoCallParticipant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoCallParticipant(
    @common.Param() params: VideoCallParticipantWhereUniqueInput
  ): Promise<VideoCallParticipant | null> {
    const result = await this.service.videoCallParticipant({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        videoCall: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoCallParticipant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoCallParticipant(
    @common.Param() params: VideoCallParticipantWhereUniqueInput,
    @common.Body() data: VideoCallParticipantUpdateInput
  ): Promise<VideoCallParticipant | null> {
    try {
      return await this.service.updateVideoCallParticipant({
        where: params,
        data: {
          ...data,

          videoCall: data.videoCall
            ? {
                connect: data.videoCall,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          videoCall: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoCallParticipant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoCallParticipant(
    @common.Param() params: VideoCallParticipantWhereUniqueInput
  ): Promise<VideoCallParticipant | null> {
    try {
      return await this.service.deleteVideoCallParticipant({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          videoCall: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
