/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalendarBookingService } from "../calendarBooking.service";
import { CalendarBookingCreateInput } from "./CalendarBookingCreateInput";
import { CalendarBooking } from "./CalendarBooking";
import { CalendarBookingFindManyArgs } from "./CalendarBookingFindManyArgs";
import { CalendarBookingWhereUniqueInput } from "./CalendarBookingWhereUniqueInput";
import { CalendarBookingUpdateInput } from "./CalendarBookingUpdateInput";

export class CalendarBookingControllerBase {
  constructor(protected readonly service: CalendarBookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CalendarBooking })
  async createCalendarBooking(
    @common.Body() data: CalendarBookingCreateInput
  ): Promise<CalendarBooking> {
    return await this.service.createCalendarBooking({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        call: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CalendarBooking] })
  @ApiNestedQuery(CalendarBookingFindManyArgs)
  async calendarBookings(
    @common.Req() request: Request
  ): Promise<CalendarBooking[]> {
    const args = plainToClass(CalendarBookingFindManyArgs, request.query);
    return this.service.calendarBookings({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        call: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CalendarBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calendarBooking(
    @common.Param() params: CalendarBookingWhereUniqueInput
  ): Promise<CalendarBooking | null> {
    const result = await this.service.calendarBooking({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        call: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CalendarBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalendarBooking(
    @common.Param() params: CalendarBookingWhereUniqueInput,
    @common.Body() data: CalendarBookingUpdateInput
  ): Promise<CalendarBooking | null> {
    try {
      return await this.service.updateCalendarBooking({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          call: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CalendarBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalendarBooking(
    @common.Param() params: CalendarBookingWhereUniqueInput
  ): Promise<CalendarBooking | null> {
    try {
      return await this.service.deleteCalendarBooking({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          call: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
