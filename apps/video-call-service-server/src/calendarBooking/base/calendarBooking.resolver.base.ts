/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CalendarBooking } from "./CalendarBooking";
import { CalendarBookingCountArgs } from "./CalendarBookingCountArgs";
import { CalendarBookingFindManyArgs } from "./CalendarBookingFindManyArgs";
import { CalendarBookingFindUniqueArgs } from "./CalendarBookingFindUniqueArgs";
import { CreateCalendarBookingArgs } from "./CreateCalendarBookingArgs";
import { UpdateCalendarBookingArgs } from "./UpdateCalendarBookingArgs";
import { DeleteCalendarBookingArgs } from "./DeleteCalendarBookingArgs";
import { CalendarBookingService } from "../calendarBooking.service";
@graphql.Resolver(() => CalendarBooking)
export class CalendarBookingResolverBase {
  constructor(protected readonly service: CalendarBookingService) {}

  async _calendarBookingsMeta(
    @graphql.Args() args: CalendarBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CalendarBooking])
  async calendarBookings(
    @graphql.Args() args: CalendarBookingFindManyArgs
  ): Promise<CalendarBooking[]> {
    return this.service.calendarBookings(args);
  }

  @graphql.Query(() => CalendarBooking, { nullable: true })
  async calendarBooking(
    @graphql.Args() args: CalendarBookingFindUniqueArgs
  ): Promise<CalendarBooking | null> {
    const result = await this.service.calendarBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CalendarBooking)
  async createCalendarBooking(
    @graphql.Args() args: CreateCalendarBookingArgs
  ): Promise<CalendarBooking> {
    return await this.service.createCalendarBooking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CalendarBooking)
  async updateCalendarBooking(
    @graphql.Args() args: UpdateCalendarBookingArgs
  ): Promise<CalendarBooking | null> {
    try {
      return await this.service.updateCalendarBooking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalendarBooking)
  async deleteCalendarBooking(
    @graphql.Args() args: DeleteCalendarBookingArgs
  ): Promise<CalendarBooking | null> {
    try {
      return await this.service.deleteCalendarBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
